createStore.d.ts

declare module 'respond-framework' {
  interface Options {
    useSpread?: boolean
  }

  type foo = (options: Options) => Options

  function createStore(options: Options): foo

  export {
    createStore
  }
}



expect.addSnapshotSerializer({
  print: event => event.type,
  test: v => typeof v === 'function' && v.__event
})



#ErrorBoundary only works with top level Flash state
#"babel": "NODE_ENV=development WEB=true babel-core ./foo.js",

"start": "NODE_ENV=development BUNDLER=webpack babel-watch --watch webpack --exclude ./respond --exclude ./controllers --exclude ./models --exclude ./utils --exclude ./config.js --exclude ./config.client.js --exclude ./config.server.js --exclude ./permissions.js --exclude ./testing  --exclude ./seed  --exclude ./device  --exclude ./helpers  --exclude ./constants  --exclude ./apis  --exclude ./monkey  --exclude ./validation  --exclude ./ --exclude ./games ./server/index.dev.js",

#from + 's'
#aggregateCount
#turn collection getter into method
#replay tools in production
#set replays defaultProductionValue in production
#import recursiveReadSync from 'recursive-readdir-sync'
#duplicating find into _find
#make ReplayTools rows have better press events on native
#make db/index.mock.js utilize create() method exactly like production version
#import db circurlarly from createdatabase



#PUT ENTIRE STORE IN VALTIO
#- lazy valtio
#- put all store options into valtio state
#-wrapModelProxy automatically to docs in state

#make sure restorSession isn't called for regular sessions
#put skip, limit, sort, and proj in options object

#final solution to simplify Code widget

#make tests stop snapping irrelevant areas (eg Home, Drawer)







/**
 * put all of store + events in proxy state
 * replace 3 args with 2 args
 * refactor createStore
 * make respond support modular replacement of all key pillars within createStore
 * splitting + ssr
 */

#- prototypes or static methods
#- parents for selector props
#- automatically apply models

#- reactive functions/getters anywhere in state


#- create new models client side
#- reviver transforms models using __type
#- __type is deleted before saving!
#- fetch is passed modulePath + models and applies them in reviver

#- selectors are attached to initial state
#- _state is set in proxy getter
#- selector props' parent is bound to this in createInitialState 

#- make findOne etc just return doc
#- Autocomplete can just deal with return, as fetch wraps model already


#- snaps are making _state proxy, and is therefore not recursively applying snapProxy along with recursive selectors
#- really we need a better mechanism for accessing _state in models, or to get rid of it

#- overridable getters

#- selectors can be set in initialState, prop selectors can be passed via ininitialState rehydration mechanism
#- need to make sure prop selectors are tracked




#- put events in state
#- change useSnapshot to target just the module's proxy - make sure parent is tracked for props
#- make useSnapshot find events in state

#- transfer selectors to initialState
#- resolve models which cant have duplicate keys in both proto + this
#- remove _state from model methods

#- newly created models need an api to automatically apply __type (eg: db.round.create())

#- change selectors to use `this`
#- selectorsD -> selectors
#- make all objects created with __type


#- pass tests

#- make test events work correctly
#- refresh weakMaps cache correctly
#- pass handicaps test

#- put events in state
#- make useRespond get events from state

#- make snaps save in state as prevState
#- put the rest of things in state

#- refactor transform/recursion to make use of new structure
#- make entire module be initial state


- remove findOne, findOnePlayer, etc -- problem is they also handle the case where u pass a pojo

#- children can specify their own props, and hi-jack access to parent state??




#revisit moduleKeys
#hydrated parentState
#props with new format (eg reducers in state)
#reducers

#access raw non-reactive state in component state

#reducer props from parent, using Map, and then use selector in its place
#for both events + reducer props support new definitions, which are placed on the parent


#manual selectors
#grand parent reducer accessed by selector
#fresh reducer in child

#fresh reducer copied to parent, then automatic selector created in child
#existing reducer automatically turned into selectors based on parent reducer discovery from Map

#access grand parent reducer with function that returns reducers


#access raw non-reactive state in component state

#hmr/replay createStore(topModuleOriginal)
#createController/clientDatabase

#combine recursive createStore code into a single function


#new approach to accessing modulePath in dbProxy
#controllers shouldn't be duplicated if same config as parent (like events)
#createControllerTree needs finishing

#combine things into options etc

#db props

#move misc things into recursion: pathSpecs, plugins, modulePaths, moduleKeys
#getSessionState needs protos hydrated

#devtools
#finalize cleaning topModule stuff at top of createStore, address topReplays etc stuff

#remove initialState
#ad hoc event props simply created in module
#nested reducer props


#selecting module from replayTools when module doesn't have its own controllers (previous nested setting)
 #crawl back up to non-existent parents to look for db/replays/options/cookies

#module selector in replayTools: Top option



#wind both propEvents + events through createEventsForModule, cache non prop

#extract reducers as any 2-3 arg functions in state, extract 0-1 arg functions into selectors
#immutable so replayEvents/reload works correctly


#recurse merge // createSeed, configReplays
#...rest needs getOwnPropertyDescriptors, getters in state, createModels




#getSessionState handling of recording nested selectors
#getSessionState handling of knowing which module model prototypes came from

#createEvents: save event in store.eventsByType
#createInitialState: save models in store.modelsByModulePath

#Model: save modulePath in function(doc, modulePath)

#fetch reviver: pass modulePath 
#getSession reviver: new store.modelsByModulePath[doc.__modulePath][v.__type](v)


#revive ssr models (posts)

#immutability:
#reducers
#selectors
#initial state


#initial state + props.state may have models that need hydration
#so like getSessionState, it would be nice to do in a second pass

#prop extraction into propReducers, propSelectors, propDefaultStateDescriptors
#hydration state is handled like getSessionState as being structured like completed state tree

#models in standard state
#cloneDeep


#const event = eventsByType[type] ?? 
#namespaces may match a module, conflicting in eventsByType

#eventsByType needs to be cleared when switching modules


#deep merge reducers/propReducers - deep merge em + assign to parent + tag children that weren't using props using Map, then reduce those to to use child store + sliced e
#extract automatic api into its own file



#instead of sliceByModulePath, use store.modules[modulePath]

#use symbol for _parent
#use symbol for e.modulePath

#make events + controllers + models support __esModule export as const functions

#prevState needs to exist on each module

#extractable events on state via state.doSomething = { event: true }
#replays will be faster if replayTools.tests isn't hydrated

#api level caching, where find/findOne are automatically cached, but like permissions, u can specify, eg: caching: { find: false, custom: true }

#history no longer working

#isNamespace
#use constants like kind.navigation, namespace.website

#controllers probably should use prototypes
#refactor all flags like isReplay, isFastReplay, ignoreChangePath, __idCounter, appParams, __sessionRestored, db, appName, appParams, app

#db.create should probably create IDs client side
#.save client side; rename make to applyModels, make client code use .create


#replace `store` with `state`
#consolidate api methods in createStore



#replayToolsState can possibly piggy back on getSessionState - remove getSessionState
#move localStorage.getItem('replayToolsTab') into localStorage.getItem('replaySettings') like other settings
#possibly combine replays + replayTools into a single module



dynamic modules
make dispatch have hook for parent modules to listen in

code splitting + simultaneus api fetching
ssr, createControllers needs to be passed the db it uses, createDatabase needs new names for things such as model, parent etc

devtools

naked component functions
widgets: Box, Row, Button, Dropdown, Switch, Checkbox, Radio, Card
components: Modal, Drawer, TabBar, ListView, Input, Radio, Pressable, Link
Docs website, Login, Recipes (plugins, modules)[multi tab recipe like vs code], Feed, Users

rspack/repack compilation
replace babel plugin with swc rust plugin
nice api for bundler dev vs development removal of mocks etc
remove/improve the ip address npm scripts handling

typescript definitions
deno

codegen
animation/timers component interface




#is it useful to have methods scoped to the current module's state?
#prevState is mutable -- does cloning object in createProxy fix this?


move replay flag to createReplays + cookies.get('token')
apply prefixPath function in createEvents

#.subscribe/eventFrom/fromEvent/isEqualNavigations needs to happen on the correct module

#what is a module? respond or state? do we return respond or state from createModule?

#just use getSessionState

#keep all respond api methods on state, but make sure they're overwritable, and bind em within respond.
#maybe make cache module-specific?

#dont pass options.merge from parent to child in addModules ; also explicitly specify merges in app modules
#need to call createRespond for each module, and bind functions to new respond object

#do we still need madeFirst? -- it needs to be module specific and remembered in state so it works via getSessionState

#call createRespond in addModule maybe, bind state to api methods

#eventsCache will need to be preserved for async addModule

#createReplays needs to determine hmr, replay status, and modulePath


#replayToolsState (remove, now depends on sessionState), replaySettings (move from localStorage to sessionStorage), replays.settings must live in state, and be revived from state and transfered to replays.settings
#getSessionState, createReplayModule, replace other sessionStorage methods, put cookies in replays,

#ignoreChild could be better or removed
#refactor replayEvents
#refactor sendTrigger
#createDispatch per module

#optimize getSessionState for production
#state.token may need to be added to all modules
#always serve non history mock on web, and use shouldChange to prevent changing during replays

#eventFrom/fromEvent needs to determine event before parsing location, and then use event's module's options.parseSearch -- event matching probably can't be modular
#basename in fromEvent is tied to a module, maybe we can use basename to prefix paths to modules; but if not, we need to use global basename instead

#pre-apply basenames to tree
#changeBasename 
#eventsByPath[path] quick check

#locationFrom
#remove .call

#.prevState.prevState optimization
#permaLink search -- use hash

#if session restored, ignore first event + events.start()

#bind methods in respond


#searchQuery.js should use reviver/replacer

#dont repeat identical navigation events
#put playing in reactive replays.playing state
#replayEvents need to dispatch last path

#overridenReducers should be per module (aside: should explicitly differentiate between module context + global context objects)


#navigationCache needs to be modular, so cachedPaths key can be specified, and exists per module, and needs to be created within fetch.js plugin
#createClientDatabase needs to allow u to specify apiCache key
#prefetching depends on both navigationCache and apiCache, and therefore fetch.js plugin
#start plugin is coupled to fetch cache
#e.cached -> e.meta.cached
#options.alwaysDispatchFollowUp

#How to facilitate prefetching through caching fetch/api results, without the initial dispatch modifying state?


#basename isn't hydrated yet when events are created
#reactive URLs (with basename) - fromEvent

#firstNavigation + curr reducer?


#make arg accept .meta prop
#make history + isCached their own plugins


#maybe reducers dont receive a 3rd arg, but instead use `this` like selectors!
# when reducing if the same state is returned, dont assign it

#always called parent plugins (parallel option)(especially on initial load), parents can listen in, leave route event callback (with blocking)
#reduce needs way to dynamically toggle deepth-first vs breadth-first


#createSeed needs to run per module, and also have access to previous module's underlying db
#seed isn't preserved across dev refreshes

#pass module-specific replays object into each module (this.replays in controllers/db/models, respond.replays in client code)

#replace createProxyHandler


#inheriting db
#inheriting settings

#assign state.replays.settings
#assign state.replays.db
#assign db/controllers/models.replays 


#replay settings shouldn't be nested when the user accesses it
#rather, we are simply assigning modules their own replays now, which includes db

#we probably need to save settings in its own sessionStorage




#!make Settings component display settings for all modules, and of course edit and populate them accordingly
#!Settings will need to recurse this[parent].replays...
#!change displayed settings based on selected module

#!replayEvents/reload will need to be able to receive a tree of settings, and merge em
#replaySettings needs to absorb settings of all modules
#reload needs to use reduced settings of all modules via form

#replays.settings.module needs to be accessible from all modules' replay objects
#builtIn settings should be moved somewhere else and be global, not modular


#??automation to inherit settings like userId top-down, option to not inherit


#need process/handle for accessing replays outside of controllers/db/models, such as for the config
#how to inject replays server-side in production?
#is it possible to not need to inject it using some sort of handle?

#models/db need consistent way to access this.db
#how to allow for collections with the same name, without sharing docs?

#inherit setting, dont share docs, global replays handle for config, assign replays to db/etc in production




#transfer form from old to new form more efficiently (without recreating)
#when sharing a parent replays, link forms

#for saving tests, convert to old style
#when not sharing a parent replays, use inherit option

#createReplays handle like createDatabase handle


#should tests just save all settings always? (that way if configs change, they still work)

#replayEvents from settings
#loadTest
#saveTest



#how to allow tests for modules to run as top module? how to store modulePath when it won't mean the same thing
#depending on when run as top or nested? 


#tests run from the top
#tests run from somewhere else
#tests run with a module path

#tests loaded with a module path
#tests loaded without one, using inferrence

#hmr keep curr module path, reload/replay can use formRespond
#settings has to be passed as is
#modulePath should be passed separately

#use ctx.sync for subscribe.js instead of sync argument

#permalink
#permalink, session, replay test
#reload, replay index

#resolveModulePath for tests loaded while not in top module

#createModel
#createDatabase

#call event callbacks with module state as `this` and switch e + state arguments


#bring back proper saving of idCounter
#settings need to save relative to focusedModulePath, then be transformed correctly when loaded


#remember to handle hmr + conf caching, cache settings and other aspects of createReplays?
#save seed in sessionStorage!

#dont return auomatic controller method responses as nested
#how to easily allow tests to play in a parent module


if (isObject(response) && shouldNestByModelName(response)) {
  const value = keyNames[controller][method]
  Object.defineProperty(response, modelNameSymbol, { value, enumerable: false, configurable: true })
}

const modelName = res?.[modelNameSymbol]
if (modelName) res = { [modelName]: res }
await e.event.done.dispatch(res, { from: e })

#strategy to use models for methods on arbitrary nested objects

const possibleDuplicate = v?.__id

if (possibleDuplicate) {
  const obj = duplicate.get(v.__id)
  if (obj) return obj
}





#auth plugin assigns to prevState
#return undefined from reducers
#nested models inside stored db rows??
#revive needs to be passed respond, not state
#should redirect return false?
#replay to index doesn't need to revive

#if (state.hasOwnProperty(k)) delete proxyStates.get(state).orig[k] -- snapshot will be broken, ideally aspects are not in proxy yet

#selectors using event.module and such don't work when compared to eg state.website, not using event protos -- this.inApp && this.curr.event.module === this.getStore().website

#the fact that if u access an object and don't use it, it always has an extra render -- can we have an api that prevents this?
#multiple references in sessionStorage come out as different objects

#for navigators, finalize strategy for `key`, eg url + type for navigations; finalize plan for normalizing event meta information in ancestor modules in userland
#eventsByType -> eventsById


#createControllersTree




rename modulePath to path and path to pattern
prevNavigationState AND prevState
assign to orig rather than proxy until end of createModule

make history work on reload with only 1 click by counting that click towards the history push

basename, unify state










basenameFull stored in its own sessionStorage, along with replayState
lazy event function creation
maybe remove e.type + e.namespace





make all tools replacable by user (including reviver)
re-organize files
finalize implementation of respond object etc