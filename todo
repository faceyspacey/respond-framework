createStore.d.ts

declare module 'respond-framework' {
  interface Options {
    useSpread?: boolean
  }

  type foo = (options: Options) => Options

  function createStore(options: Options): foo

  export {
    createStore
  }
}



NEW UI WORK:
- naked component functions
- widgets: Box, Row, Button, Dropdown, Switch, Checkbox, Radio, Card
- components: Modal, Drawer, TabBar, ListView, Input, Radio, Pressable, Link
- Docs website, Login, Recipes (plugins, modules)[multi tab recipe like vs code], Feed, Users



#ErrorBoundary only works with top level Flash state
#"babel": "NODE_ENV=development WEB=true babel-core ./foo.js",

"start": "NODE_ENV=development BUNDLER=webpack babel-watch --watch webpack --exclude ./respond --exclude ./controllers --exclude ./models --exclude ./utils --exclude ./config.js --exclude ./config.client.js --exclude ./config.server.js --exclude ./permissions.js --exclude ./testing  --exclude ./seed  --exclude ./device  --exclude ./helpers  --exclude ./constants  --exclude ./apis  --exclude ./monkey  --exclude ./validation  --exclude ./ --exclude ./games ./server/index.dev.js",

#from + 's'
#aggregateCount
#turn collection getter into method
#replay tools in production
#set replays defaultProductionValue in production
#import recursiveReadSync from 'recursive-readdir-sync'

isNamespace
duplicating find into _find
clearStorage console.log note

make ReplayTools rows have better press events on native

make db/index.mock.js utilize create() method exactly like production version



put skip, limit, sort, and proj in options object

dont hide _namespace, _type in state (only in actions)
wrapModelProxy automatically to docs in state




PUT ENTIRE STORE IN VALTIO
- lazy valtio
- put all store options into valtio state



export const createModule = (mod, modules, modulePath = '', parent) => {
  createControllers(mod, modules, modulePath, parent)

  if (!mod.modules) return

  Object.keys(mod.modules).forEach(k => {
    const child = mod.modules[k]
    const path = modulePath ? `${modulePath}.${k}` : k

    createModule(child, modules, path, mod)
  })
}


const createControllers = (mod, modules, path = '', parent) =>  {
  const { controllers = {}, createController = createControllerDefault } = mod.db?.controllers
    ? mod.db
    : parent?.db?.inheritControllers !== false ? (parent.db || {}) : {}

  modules[path] = {}

  for (const controller in controllers) {
    const Child = { 
      _name: controller,
      _namePlural: controller + 's',
      ...controllers[controller],
    }

    modules[path][controller] = createController(Child, Parent)
  }
}

